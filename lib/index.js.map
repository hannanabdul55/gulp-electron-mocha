{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs-promise';\nimport through from 'through2';\nimport { spawn } from 'child_process';\nimport path from 'path';\nimport assign from 'object-assign';\nimport toSpawnArgs from 'object-to-spawn-args';\nimport gutil from 'gulp-util';\n\nconst PluginError = gutil.PluginError;\nconst pluginName = require('../package.json').name;\n\nexport default function (opts = {}) {\n  const electronPathFile = lookup('electron-prebuilt/path.txt');\n  const electronPath = fs.readFileSync(electronPathFile, 'utf8');\n  const electronMochaPath = lookup('electron-mocha/bin/electron-mocha', true);\n\n  if (!electronMochaPath) {\n    throw new PluginError(pluginName, 'Cannot find electron-mocha.');\n  }\n\n  opts.electronMocha = toSpawnArgs(opts.electronMocha || {});\n\n  return through.obj(function(file, enc, cb) {\n    const paths = {\n      electronMocha: electronMochaPath,\n      electron: electronPath,\n      file: file.path,\n    };\n\n    spawnElectronMocha(paths, opts, this, (err) => {\n      if (err) {\n        return cb(err);\n      }\n\n      this.push(file);\n      cb();\n    });\n  });\n}\n\nfunction spawnElectronMocha(paths, opts, stream, cb) {\n  const args = [...opts.electronMocha, paths.file];\n  const env = assign(process.env, { 'ELECTRON_PATH': paths.electron });\n  const electronMocha = spawn(paths.electronMocha, args, { env });\n\n  if (opts.logfile) {\n    const writeStream = fs.createWriteStream(opts.logfile, { flags: 'a' });\n    electronMocha.stdout.pipe(writeStream);\n  }\n\n  if (!opts.suppressStdout) {\n    electronMocha.stdout.pipe(process.stdout);\n  }\n\n  if (!opts.suppressStderr) {\n    electronMocha.stderr.pipe(process.stderr);\n  }\n\n  electronMocha.stdout.on('data', stream.emit.bind(stream, 'electronMochaStdoutData'));\n  electronMocha.stdout.on('end', stream.emit.bind(stream, 'electronMochaStdoutEnd'));\n\n  electronMocha.stderr.on('data', stream.emit.bind(stream, 'electronMochaStderrData'));\n  electronMocha.stderr.on('end', stream.emit.bind(stream, 'electronMochaStderrEnd'));\n\n  electronMocha.on('error', stream.emit.bind(stream, 'electronMochaError'));\n  electronMocha.on('exit', stream.emit.bind(stream, 'electronMochaExit'));\n\n  electronMocha.on('error', function (err) {\n      cb(new gutil.PluginError(pluginName, err.message));\n  });\n\n  electronMocha.on('exit', function (code) {\n    if (code === 0 || opts.silent) {\n      cb();\n    } else {\n      cb(new gutil.PluginError(pluginName, 'Test failed. electronMocha exit code: ' + code));\n    }\n  });\n}\n\nexport function lookup(pathToLookup, isExecutable) {\n  const iz = module.paths.length;\n\n  for (let i = 0; i < iz; i++) {\n    let absPath = path.join(module.paths[i], pathToLookup);\n\n    if (isExecutable && process.platform === 'win32') {\n      absPath += '.cmd';\n    }\n\n    try {\n      const stat = fs.statSync(absPath);\n\n      if (stat) {\n        return absPath;\n      }\n    } catch(err) {\n      continue;\n    }\n  }\n\n  return '';\n}\n"]}